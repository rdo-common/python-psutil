--- psutil/tests/test_memory_leaks.py~	2018-01-01 14:32:56.000000000 -0600
+++ psutil/tests/test_memory_leaks.py	2018-01-22 10:03:05.206021533 -0600
@@ -365,14 +365,14 @@
     @skip_if_linux()
     # Windows implementation is based on a single system-wide
     # function (tested later).
-    @unittest.skipIf(WINDOWS, "worthless on WINDOWS")
-    def test_connections(self):
-        # TODO: UNIX sockets are temporarily implemented by parsing
-        # 'pfiles' cmd  output; we don't want that part of the code to
-        # be executed.
-        with create_sockets():
-            kind = 'inet' if SUNOS else 'all'
-            self.execute(self.proc.connections, kind)
+#    @unittest.skipIf(WINDOWS, "worthless on WINDOWS")
+#    def test_connections(self):
+#        # TODO: UNIX sockets are temporarily implemented by parsing
+#        # 'pfiles' cmd  output; we don't want that part of the code to
+#        # be executed.
+#        with create_sockets():
+#            kind = 'inet' if SUNOS else 'all'
+#            self.execute(self.proc.connections, kind)
 
     @unittest.skipIf(not HAS_ENVIRON, "not supported")
     def test_environ(self):
--- psutil/tests/test_memory_leaks.py~	2018-01-22 10:04:04.000000000 -0600
+++ psutil/tests/test_memory_leaks.py	2018-01-22 10:08:05.378651502 -0600
@@ -200,7 +200,7 @@
             "pid", "as_dict", "children", "cpu_affinity", "cpu_percent",
             "ionice", "is_running", "kill", "memory_info_ex", "memory_percent",
             "nice", "oneshot", "parent", "rlimit", "send_signal", "suspend",
-            "terminate", "wait"))
+            "terminate", "wait", "connections"))
         for name in dir(psutil.Process):
             if name.startswith('_'):
                 continue
